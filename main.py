# main.py
import os
import asyncio
from fastapi import FastAPI, Request
from openai import OpenAI

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OpenAI –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

app = FastAPI()

# Health-check: Render/–±—Äa—É–∑–µ—Ä –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∂–∏–≤
@app.get("/")
async def health():
    return {"ok": True}

def ask_gpt_sync(prompt: str) -> str:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ GPT (–æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ thread, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å event loop)."""
    system = "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∏–º–µ–Ω–∏ –ö–∞–π. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."
    r = client.chat.completions.create(
        model="gpt-4o-mini",  # –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ gpt-4o, gpt-4.1-mini –∏ —Ç.–¥. –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
        messages=[
            {"role": "system", "content": system},
            {"role": "user", "content": prompt},
        ],
        temperature=0.7,
    )
    return r.choices[0].message.content.strip()

@app.post("/alice")
async def alice_handle(request: Request):
    body = await request.json()

    # –î–æ—Å—Ç–∞—ë–º —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ê–ª–∏—Å–∞ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –∏ command, –∏ original_utterance)
    req = body.get("request", {}) or {}
    user_text = (req.get("original_utterance") or req.get("command") or "").strip().lower()

    # –ü—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤—ã—Ö–æ–¥–∞
    if user_text in {"–≤—ã—Ö–æ–¥", "—Å—Ç–æ–ø", "—Ö–≤–∞—Ç–∏—Ç"}:
        reply = "–î–æ —Å–≤—è–∑–∏! –ó–æ–≤–∏, –µ—Å–ª–∏ —á—Ç–æ."
        return {
            "version": body.get("version", "1.0"),
            "response": {"text": reply, "tts": reply, "end_session": True},
        }

    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å–∫–∞–∑–∞–Ω–æ ‚Äî –ø–æ–∑–¥–æ—Ä–æ–≤–∞–µ–º—Å—è
    if not user_text:
        reply = "–ü—Ä–∏–≤–µ—Ç! –Ø –ö–∞–π. –°–ø—Ä–æ—Å–∏ –º–µ–Ω—è –æ —á—ë–º —É–≥–æ–¥–Ω–æ."
        return {
            "version": body.get("version", "1.0"),
            "response": {"text": reply, "tts": reply, "end_session": False},
        }

    # –í—ã–∑—ã–≤–∞–µ–º –º–æ–¥–µ–ª—å, –Ω–æ –Ω–µ –¥–∞—ë–º –µ–π –∑–∞–≤–∏—Å–Ω—É—Ç—å –¥–æ–ª—å—à–µ ~2 —Å–µ–∫—É–Ω–¥
    try:
        reply = await asyncio.wait_for(asyncio.to_thread(ask_gpt_sync, user_text), timeout=1.8)
    except asyncio.TimeoutError:
        reply = "–ü–æ–¥—É–º–∞–ª... –¥–∞–≤–∞–π –ø—Ä–æ–¥–æ–ª–∂–∏–º, —è –ø–æ–¥–∫–ª—é—á—É—Å—å üòâ"
    except Exception:
        reply = "–ü–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –º–æ–¥–µ–ª–∏, –Ω–æ —è –Ω–∞ —Å–≤—è–∑–∏."

    return {
        "version": body.get("version", "1.0"),
        "response": {"text": reply, "tts": reply, "end_session": False},
    }
