# main.py
from fastapi import FastAPI, Request
import os
from openai import OpenAI
import asyncio

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

app = FastAPI()

@app.get("/")
async def health():
    return {"ok": True}

def ask_sync(prompt: str) -> str:
    # v1.x: client.chat.completions.create
    r = client.chat.completions.create(
        model="gpt-4o-mini",   # –º–æ–∂–Ω–æ gpt-4o, gpt-4o-mini, gpt-4.1-mini –∏ —Ç.–ø.
        messages=[{"role": "user", "content": prompt}],
        temperature=0.7,
    )
    return r.choices[0].message.content.strip()

@app.post("/alice")
async def handle(request: Request):
    body = await request.json()
    utter = (body.get("request", {}).get("original_utterance")
             or body.get("request", {}).get("command")
             or "").strip()

    try:
        # –ø–æ—Ç–æ–º—É —á—Ç–æ –∫–ª–∏–µ–Ω—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π ‚Äî –≥–æ–Ω—è–µ–º –≤ thread + –æ–≥—Ä–∞–Ω–∏—á–∏–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        reply = await asyncio.wait_for(asyncio.to_thread(ask_sync, utter), timeout=1.8)
    except asyncio.TimeoutError:
        reply = "–ü–æ–¥—É–º–∞–ª... –¥–∞–≤–∞–π –ø—Ä–æ–¥–æ–ª–∂–∏–º, —è –ø–æ–¥–∫–ª—é—á—É—Å—å üôÇ"
    except Exception:
        reply = "–ü–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –º–æ–¥–µ–ª–∏, –Ω–æ —è –Ω–∞ —Å–≤—è–∑–∏."

    return {
        "version": body.get("version", "1.0"),
        "response": {"text": reply, "tts": reply, "end_session": False}
    }
